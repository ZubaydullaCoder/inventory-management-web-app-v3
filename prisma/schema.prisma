// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
// Defines the user roles within the application.
enum Role {
  SHOP_OWNER
  SHOP_STAFF
}

// Defines the available subscription plans.
enum SubscriptionPlan {
  FREE_TRIAL
  BASIC
  STANDARD
  PREMIUM
}

// Defines the status of a subscription.
enum SubscriptionStatus {
  TRIALING
  ACTIVE
  EXPIRED
  CANCELED
}


// MODELS

// Represents a user account in the system, compatible with NextAuth.js.
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(SHOP_OWNER)

  shop   Shop?

  accounts Account[]
  sessions Session[]
}

// NextAuth.js model for linking OAuth accounts to a User.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// NextAuth.js model for database-based sessions.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// NextAuth.js model for email verification tokens.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Represents a single retail shop, the central entity for an account.
model Shop {
  id   String @id @default(cuid())
  name String

  ownerId String @unique
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Restrict)

  subscription Subscription?

  // One-to-many relations to core business models
  products   Product[]
  categories Category[]
  suppliers  Supplier[]
  customers  Customer[]

  @@index([ownerId])
}

// Manages the subscription details for a Shop.
model Subscription {
  id        String             @id @default(cuid())
  shopId    String             @unique
  plan      SubscriptionPlan   @default(FREE_TRIAL)
  status    SubscriptionStatus @default(TRIALING)
  startDate DateTime           @default(now())
  endDate   DateTime

  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}

// NEW CORE BUSINESS MODELS

// Product categories defined by the shop owner.
model Category {
  id   String @id @default(cuid())
  name String

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)

  products Product[]

  @@index([shopId])
  @@unique([shopId, name]) // Add unique constraint for shop-scoped category names
}

// Suppliers from whom products are purchased.
model Supplier {
  id            String  @id @default(cuid())
  name          String
  contactPerson String?
  phone         String?
  email         String?
  address       String?

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)

  products Product[]

  @@index([shopId])
}

// Customers who purchase products.
model Customer {
  id                 String  @id @default(cuid())
  name               String
  phone              String?
  email              String?
  address            String?
  outstandingBalance Decimal @default(0)

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}

// The central model for all inventory items.
model Product {
  id            String   @id @default(cuid())
  name          String
  sku           String?  @unique
  purchasePrice Decimal
  sellingPrice  Decimal
  stock         Int      @default(0)
  unit          String?  // Unit of measure (e.g., "pieces", "kg", "liters")
  reorderPoint  Int?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  supplierId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)

  @@index([shopId])
  @@index([categoryId])
  @@index([supplierId])
  @@unique([shopId, name]) // Add unique constraint for shop-scoped product names
}